# -*- coding: utf-8 -*-
"""tesingmypython.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/estrella-mooney/48610e45b38c4c9f731d4a5ff3434f3f/tesingmypython.ipynb
"""

string = "good"
reversed_string = string[::-1]
print(reversed_string)

s = "xxxyyyzzz"

a = list(s)

# change every third letter in place with a list comprehension
a[2::3] = [x.upper() for x in a[2::3]]

# back to a string
s = ''.join(a)

print(s)

# If the 3rd is a digit fail, run an error
#input_string = input("Enter a string:")

#if len(input_string) >= 3 and input_string[2].isdigit():
   # raise ValueError("Error: The third character is a digit.")

# indicate whether an error condition has been encountered
error_flag = False

# Asks the user to input a string
input_string = input("Enter a string:")

# check if the length is equal to or greater than 3
if len(input_string) >= 3:


    third_character = input_string[2]

# If the length condition is met, extract the third character from using indexing (0-9)

    if third_character in '0123456789':
        error_flag = True

# If the third_character is  a digit, set  error_flag to True
if error_flag:
    print("Error: The third character is a digit.")

##### Palindrome ######

# Ask the user to input a string
string = input("Enter string: ")

# Remove spaces and convert to lowercase
cleaned_string = ''.join(char.lower() for char in string if char.isalnum())

# Reverse the cleaned string
reversed_string = cleaned_string[::-1]

if cleaned_string == reversed_string:
    print("Yes, it is a palindrome.")
else:
    print("No, it is not a palindrome.")

